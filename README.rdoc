= diff_to_html

This is a Ruby class for converting unified diff, like the one you get with 'svn diff', to HTML like in 
changeset viewer of a tool like Trac, GitHub or Codenotifier, 
e.g. http://codenotifier.com/projects/49/commits/47#F0.

It's based on code from http://gurge.com/blog/2006/10/03/subversion-diff-viewer-cgi-in-ruby/ (thanks Adam 
Doppelt!), adopted lightly to support multifile diffs and have more familiar output. It definitely have 
things to improve, so contribution/patches are very welcome.

* install the gem: gem install artemv-diff_to_html --source=http://gems.github.com
* go to gem's 'examples' dir (it's .../ruby/lib/ruby/gems/1.8/gems/artemv-diff_to_html-x.x.x/examples/) and run 'ruby test.rb >out.html' - 
  this will get diff from sample 'svn diff' and generate out.html. Resulting html is linked to diff.css in 'examples' directory - you'll need
  to copy it to your project's dir to use it.

To use in Rails project:

  require 'diff_to_html'
  ...
  converter = DiffToHtml.new
  ...

After that you don't need the will_paginate <i>plugin</i> in your Rails
application anymore. Just add a simple require to the end of
"config/environment.rb":

  gem 'mislav-will_paginate', '~> 2.2'
  require 'will_paginate'

That's it. Remember to install the gem on <b>all</b> machines that you are
deploying to.

<i>There are extensive
{installation instructions}[http://github.com/mislav/will_paginate/wikis/installation]
on {the wiki}[http://github.com/mislav/will_paginate/wikis].</i>


== Example usage

Use a paginate finder in the controller:

  @posts = Post.paginate_by_board_id @board.id, :page => params[:page], :order => 'updated_at DESC'

Yeah, +paginate+ works just like +find+ -- it just doesn't fetch all the
records.  Don't forget to tell it which page you want, or it will complain!
Read more on WillPaginate::Finder::ClassMethods.

Render the posts in your view like you would normally do. When you need to render
pagination, just stick this in:

  <%= will_paginate @posts %>

You're done. (Copy and paste the example fancy CSS styles from the bottom.) You
can find the option list at WillPaginate::ViewHelpers.

How does it know how much items to fetch per page? It asks your model by calling
its <tt>per_page</tt> class method. You can define it like this:

  class Post < ActiveRecord::Base
    cattr_reader :per_page
    @@per_page = 50
  end

... or like this:

  class Post < ActiveRecord::Base
    def self.per_page
      50
    end
  end

... or don't worry about it at all. WillPaginate defines it to be <b>30</b> by default.
But you can always specify the count explicitly when calling +paginate+:

  @posts = Post.paginate :page => params[:page], :per_page => 50

The +paginate+ finder wraps the original finder and returns your resultset that now has
some new properties. You can use the collection as you would with any ActiveRecord
resultset. WillPaginate view helpers also need that object to be able to render pagination:

  <ol>
    <% for post in @posts -%>
      <li>Render `post` in some nice way.</li>
    <% end -%>
  </ol>

  <p>Now let's render us some pagination!</p>
  <%= will_paginate @posts %>

More detailed documentation:

* WillPaginate::Finder::ClassMethods for pagination on your models;
* WillPaginate::ViewHelpers for your views.


== Authors and credits

Authors::                Mislav Marohnić, PJ Hyett
Original announcement::  http://errtheblog.com/post/929 
Original PHP source::    http://www.strangerstudios.com/sandbox/pagination/diggstyle.php

All these people helped making will_paginate what it is now with their code
contributions or just simply awesome ideas:

Chris Wanstrath, Dr. Nic Williams, K. Adam Christensen, Mike Garey, Bence
Golda, Matt Aimonetti, Charles Brian Quinn, Desi McAdam, James Coglan, Matijs
van Zuijlen, Maria, Brendan Ribera, Todd Willey, Bryan Helmkamp, Jan Berkel,
Lourens Naudé, Rick Olson, Russell Norris, Piotr Usewicz, Chris Eppstein.


== Usable pagination in the UI

There are some CSS styles to get you started in the "examples/" directory. They
are showcased in the <b>"examples/index.html"</b> file.

More reading about pagination as design pattern:

* Pagination 101:
  http://kurafire.net/log/archive/2007/06/22/pagination-101
* Pagination gallery:
  http://www.smashingmagazine.com/2007/11/16/pagination-gallery-examples-and-good-practices/
* Pagination on Yahoo Design Pattern Library:
  http://developer.yahoo.com/ypatterns/parent.php?pattern=pagination

Want to discuss, request features, ask questions? Join the
{Google group}[http://groups.google.com/group/will_paginate].

